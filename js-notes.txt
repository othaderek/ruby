||/* Javascript things to master (For advanced JS) */|| 
-------------------------------------------------------

These are notes that I've taken from a Chris Hawkes Youtube video
Link here:https://www.youtube.com/watch?v=OIioG0cx0Wo



1. This Keyword
	What is it? Why does it work? How does it work?
	It has some differences between strict mode and non-strict mode.
	Value of this is determined by how a function is called.
	This references the object that is executing the current function.

2. Functions
	Functions are first-class objects in JS. They can be passed
	around like strings and numbers. They can be anonymous (named
	or unnamed). Callbacks.

3. Prototypes
	Understand how new objects are created and how prototypal enheritance works. 

4. IIFE & Modules
	Why does IIFE exist? JQuery uses this pattern.
	IIFE are Immediately Invoked Function Expressions. 
	They are javascript functions that immediately run as soon as they are defined.

5. Global Namespace
	Dont attach things to a window object

6. Closures
	Creates interesting ways to approach or solve problems. Really understanding lexical scope is important.

7. Babel vs Typescript
	What do they each aim to do? Who is behind these projects?

8. Object constructors
	
9. Specification
	ECMA script specification. READ IT.

10. Chrome Dev Tools
	Understand how to execute JS from console. 
	Good for inspecting JS objects and executing small statements


_______________________________________________________________________

||/* 4 Javascript Design patterns you must know */|| 
----------------------------------------------------

1. Module Design Pattern
2. Protype Design Pattern
3. Observer Design Pattern
4. Singleton

Each pattern consists of many properties, though, I will emphasize the following key points:

Context: Where/under what circumstances is the pattern used?
Problem: What are we trying to solve?
Solution: How does using this pattern solve our proposed problem?
Implementation: What does the implementation look like?

1. Module Design Pattern
	Modules most prevalently used for keeping particular pieces of code independent of other components. Provides loose coupling to 
	supportwell structured code.
	Modules are JS classes. Encapsulation: protecting states and behaviors from being accessed from other classes.

_______________________________________________________________________

||/* Answering tricky JS Interview questions */||

28 minute Youtbe video t

_______________________________________________________________________
||/* What is Node.js? */|| (Twitter bot tutorial)
----------------------------------------------------

When you type into your browser, say to google.com you are making a request to their server, and that server gives you a response. 
Request >> Response.
If you're creating a basic html, css, js site, well thats one thing, but what happens if you're trying to do mroe than that? You build a server application. Node is a framework for writing custom servers. Twitter api requires OAuth. An answer to this is creating a server application with node.

_______________________________________________________________________
||/* Arrow Functions */||
-------------------------

I've been playing around with arrow functions. They sort of remind me of what I think lambdas in python are. The syntax looks a lot cleaner than normal functions but the idea isnt to use arrow functions entirely as a replacement. The idea is to use arrow functions within normal functions as a form of encapsulation. There are a nubmer of others ways to use them but thats what I have witnessed thus far.












